buildscript {
    dependencies {
        classpath "com.h2database:h2:${h2Version}"
        classpath "org.flywaydb:flyway-core:10.17.0"
    }
}
// TODO @Galler rework
plugins {
    id 'org.springframework.boot' version "${springBoot3PlatformVersion}"
    id 'java'
    id 'checkstyle'
    // Plugin that handles database migration.
    id 'org.flywaydb.flyway' version "10.17.0"
    id 'org.jooq.jooq-codegen-gradle' version "3.19.10"

    id 'dev.yumi.gradle.licenser' version "${gradleLicenserVersion}"
    id 'com.jaredsburrows.license' version "${jaredsburrowsLicenseVersion}"
}

// ----------------------------------------------------------

def dbVersion = "${h2Version}"
def dbDriver = 'org.h2.Driver'
def dbUrl = "jdbc:h2:file:${project.projectDir}/build/h2-db/test;NON_KEYWORDS=VALUE;AUTO_SERVER=TRUE"
def dbUsername = 'sa'
def dbPassword = ''
def dbMigration = 'src/main/resources/db/migration'

// ----------------------------------------------------------

bootJar {
    enabled = false
}

// ----------------------------------------------------------

tasks.register('runApp', JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs '--add-opens java.base/java.lang=ALL-UNNAMED'
}

// ----------------------------------------------------------

dependencies {
    implementation platform("org.springframework.boot:spring-boot-dependencies:${springBoot3PlatformVersion}")
    implementation project(":spring-boot-3-jooq-complete")
    implementation "com.h2database:h2:${dbVersion}"
    implementation "jakarta.validation:jakarta.validation-api:${jakartaValidationApiVersion}"
    implementation 'org.springframework:spring-web'
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation "jakarta.transaction:jakarta.transaction-api:${jakartaTransactionApiVersion}"
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springDocOpenAPIVersion2}"
    implementation "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    runtimeOnly "org.jooq:jooq-codegen:3.19.10"
    jooqCodegen "org.jooq:jooq-meta:3.19.10"


    testImplementation "org.assertj:assertj-core:${assertJVersion}"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"


}

// ----------------------------------------------------------

flyway {
    url = dbUrl
    user = dbUsername
    password = dbPassword
    driver = dbDriver
    defaultSchema = 'SHOP_DOMAIN_FLYWAY'
    createSchemas = true
    encoding = 'UTF-8'
    locations = ["filesystem:./${dbMigration}"]
}

// ----------------------------------------------------------

jooq {
    configuration {

        jdbc {
            driver = dbDriver
            url = dbUrl
            user = dbUsername
            password = dbPassword
        }

        generator {
            database {
                name = "org.jooq.meta.h2.H2Database"
                includes = ".*"
                inputSchema = 'SHOP_DOMAIN'
                recordVersionFields = 'CONCURRENCY_VERSION'
            }

            generate {}
            target {
                packageName = "sampleshop"
            }
        }
    }
}

tasks.named("compileJava") {
    dependsOn(tasks.named("jooqCodegen"))
}

tasks.named("jooqCodegen") {
    dependsOn(tasks.named("flywayMigrate"))
    inputs.files(fileTree("src/main/resources/db/migration"))
}

// ----------------------------------------------------------

tasks.withType(Checkstyle).configureEach {
    enabled = false
}
