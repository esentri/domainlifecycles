plugins {
    id 'org.springframework.boot' version '3.2.4'
    id 'java'
    id 'checkstyle'
    // Plugin that handles database migration.
    id 'org.flywaydb.flyway' version "${flywayVersion}"
    // Plugin that integrates the jOOQ code generation tool.
    id 'nu.studer.jooq' version "${nuStuderJooqVersion}"
    id 'org.quiltmc.gradle.licenser' version "${quiltmcLicenserVersion}"
    id 'com.jaredsburrows.license' version "${jaredsburrowsLicenseVersion}"
}

// ----------------------------------------------------------

def dbVersion = '2.2.224'
def dbDriver = 'org.h2.Driver'
def dbUrl = "jdbc:h2:file:${project.projectDir}/build/h2-db/test;NON_KEYWORDS=VALUE;AUTO_SERVER=TRUE"
def dbUsername = 'sa'
def dbPassword = ''
def dbMigration = 'src/main/resources/db/migration'

// ----------------------------------------------------------

bootJar {
    enabled = false
}

// ----------------------------------------------------------

configurations {
    flywayMigration
}

tasks.register('runApp', JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs '--add-opens java.base/java.lang=ALL-UNNAMED'

}
// ----------------------------------------------------------

dependencies {
    implementation platform('org.springframework.boot:spring-boot-dependencies:3.3.4')
    implementation project(":spring-boot-3-jooq-complete")
    implementation "com.h2database:h2:${dbVersion}"
    implementation "jakarta.validation:jakarta.validation-api:${jakartaValidationApiVersion}"
    implementation 'org.springframework:spring-web'
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation "jakarta.transaction:jakarta.transaction-api:${jakartaTransactionApiVersion}"
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
    implementation "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    flywayMigration "com.h2database:h2:${dbVersion}"
    jooqGenerator "com.h2database:h2:${dbVersion}"

    testImplementation "org.assertj:assertj-core:${assertJVersion}"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"


}

// ----------------------------------------------------------

flyway {
    configurations = ['flywayMigration']
    url = dbUrl
    user = dbUsername
    password = dbPassword
    defaultSchema = 'SHOP_DOMAIN_FLYWAY'
    createSchemas = true
    encoding = 'UTF-8'
    locations = ["filesystem:./${dbMigration}"]
}

// ----------------------------------------------------------

jooq {
    configurations {
        main {
            generationTool {

                // Configures a JDBC connection.
                // Link: https://www.jooq.org/doc/latest/manual/code-generation/codegen-advanced/codegen-config-jdbc/
                //
                jdbc {
                    driver = dbDriver
                    url = flyway.url
                    user = dbUsername
                    password = dbPassword
                }

                // Configures code generation, including the overridable code generator class.
                // Link: https://www.jooq.org/doc/latest/manual/code-generation/codegen-advanced/codegen-config-generator/
                //
                generator {

                    // Configures the 'jooq-meta' module, which reads the configured database meta data.
                    // In its simplest form, it can be left empty, when meaningful defaults will apply.
                    // Link: https://www.jooq.org/doc/latest/manual/code-generation/codegen-advanced/codegen-config-database/
                    //
                    database {

                        name = 'org.jooq.meta.h2.H2Database'

                        // All elements that are generated from your schema. Watch out for case-sensitivity.
                        // Depending on your database, this might be important! You can create case-insensitive
                        // regular expressions using syntax: (?i:expr) Whitespace ignored / comment possible.
                        //
                        includes = '.*'

                        // The schema that is used locally as a source for meta information. This could be your
                        // development schema or the production schema, etc This cannot be combined with the
                        // schemata element. If left empty, jOOQ will generate all available schemata.
                        // See the manual's next section to learn how to generate several schemata.
                        //
                        inputSchema = 'SHOP_DOMAIN'

                        // jOOQ's 'UpdatableRecord' supports an optimistic locking feature, which can be enabled
                        // in the code generator by specifying a regular expression that defines such a record's
                        // version and/or timestamp fields.
                        //
                        // These regular expressions should match at most one column per table, again either by
                        // their fully qualified names (catalog.schema.table.column_name) or by their names only
                        // (column_name).
                        //
                        recordVersionFields = 'CONCURRENCY_VERSION'

                        // A zero-scale decimal, such as DECIMAL(10) or NUMBER(10, 0) is really an integer
                        // type with a decimal precision rather than a binary / bitwise precision. Some
                        // databases (e.g. Oracle) do not support actual integer types at all, only decimal
                        // types.
                        //
                        // If this is not a desirable default, it can be deactivated either explicitly on
                        // a per-column basis using forced types, or globally using the following flag:
                        //
                        forceIntegerTypesOnZeroScaleDecimals = true
                    }

                    // Configures the the jooq-codegen module, which generates Java or Scala code, or XML from your database.
                    // Link: https://www.jooq.org/doc/latest/manual/code-generation/codegen-advanced/codegen-config-generate/
                    //
                    generate {
                        generatedAnnotation = false
                        generatedAnnotationType = 'DETECT_FROM_JDK'
                        javaTimeTypes = true
                    }

                    // Configures the location of your generated output. Optional.
                    // Link: https://www.jooq.org/doc/latest/manual/code-generation/codegen-advanced/codegen-config-target/
                    //
                    target {

                        // The root package name inside of which all generated code is located.
                        //
                        packageName = 'sampleshop'
                    }
                }
            }
        }
    }
}

// configure jOOQ task such that it only executes when something
// has changed that potentially affects the generated JOOQ sources:
// - the jOOQ configuration has changed (Jdbc, Generator, Strategy, etc.)
// - the classpath used to execute the jOOQ generation tool has changed
//   (jOOQ library, database driver, strategy classes, etc.)
// - the schema files from which the schema is generated and which is used by
//   jOOQ to generate the sources have changed (scripts added, modified, etc.)
tasks.named('generateJooq').configure {
    // ensure database schema has been prepared by Flyway before generating the jOOQ sources
    dependsOn tasks.named('flywayMigrate')

    // declare Flyway migration scripts as inputs on the jOOQ task
    inputs.files(fileTree("${dbMigration}"))
            .withPropertyName('migrations')
            .withPathSensitivity(PathSensitivity.RELATIVE)

    // make jOOQ task participate in incremental builds (and build caching)
    allInputsDeclared = true
}

// ----------------------------------------------------------

tasks.withType(Checkstyle) {
    enabled = false
}
