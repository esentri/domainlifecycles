buildscript {
    dependencies {
        classpath libs.h2
        classpath libs.flyway.core
    }
}

plugins {
    id 'java'
    id 'checkstyle'
    alias libs.plugins.spring.boot.plugin
    alias libs.plugins.flyway.plugin
    alias libs.plugins.jooq.codegen.gradle
    alias libs.plugins.yumi.gradle.licenser.plugin
    alias libs.plugins.jaredsburrows.license.plugin
}

// ----------------------------------------------------------

def dbVersion = libs.versions.h2.version.get()
def dbDriver = 'org.h2.Driver'
def dbUrl = "jdbc:h2:file:${project.projectDir}/build/h2-db/test;NON_KEYWORDS=VALUE;AUTO_SERVER=TRUE"
def dbUsername = 'sa'
def dbPassword = ''
def dbMigration = 'src/main/resources/db/migration'

// ----------------------------------------------------------

bootJar {
    enabled = false
}

// ----------------------------------------------------------

tasks.register('runApp', JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs '--add-opens java.base/java.lang=ALL-UNNAMED'
}

// ----------------------------------------------------------

dependencies {
    implementation project(":dlc-spring-boot-autoconfig")

    implementation platform(libs.spring.boot3.dependencies)
    implementation project(":spring-boot-3-jooq-complete")

    implementation libs.h2
    implementation libs.jakarta.validation.api
    implementation 'org.springframework:spring-web'
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation libs.jakarta.transaction.api

    implementation libs.spring.doc.openapi.starter.webmvc.ui
    implementation libs.lombok
    annotationProcessor libs.lombok

    runtimeOnly libs.jooq.codegen
    jooqCodegen libs.jooq.meta


    testImplementation libs.assertj
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testCompileOnly libs.lombok
    testAnnotationProcessor libs.lombok

}

// ----------------------------------------------------------

flyway {
    url = dbUrl
    user = dbUsername
    password = dbPassword
    driver = dbDriver
    defaultSchema = 'SHOP_DOMAIN_FLYWAY'
    createSchemas = true
    encoding = 'UTF-8'
    locations = ["filesystem:./${dbMigration}"]
}

// ----------------------------------------------------------

jooq {
    configuration {

        jdbc {
            driver = dbDriver
            url = dbUrl
            user = dbUsername
            password = dbPassword
        }

        generator {
            database {
                name = "org.jooq.meta.h2.H2Database"
                includes = ".*"
                inputSchema = 'SHOP_DOMAIN'
                recordVersionFields = 'CONCURRENCY_VERSION'
            }

            generate {}
            target {
                packageName = "sampleshop"
            }
        }
    }
}

tasks.named("compileJava") {
    dependsOn(tasks.named("jooqCodegen"))
}

tasks.named("jooqCodegen") {
    dependsOn(tasks.named("flywayMigrate"))
    inputs.files(fileTree("src/main/resources/db/migration"))
}

// ----------------------------------------------------------

tasks.withType(Checkstyle).configureEach {
    enabled = false
}
