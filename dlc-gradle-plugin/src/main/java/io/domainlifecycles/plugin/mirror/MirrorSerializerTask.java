/*
 *     ___
 *     │   ╲                 _
 *     │    ╲ ___ _ __  __ _(_)_ _
 *     |     ╲ _ ╲ '  ╲╱ _` │ │ ' ╲
 *     |_____╱___╱_│_│_╲__,_│_│_||_|
 *     │ │  (_)╱ _│___ __ _  _ __│ |___ ___
 *     │ │__│ │  _╱ -_) _│ ││ ╱ _│ ╱ -_|_-<
 *     │____│_│_│ ╲___╲__│╲_, ╲__│_╲___╱__╱
 *                      |__╱
 *
 *  Copyright 2019-2025 the original author or authors.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package io.domainlifecycles.plugin.mirror;

import io.domainlifecycles.plugin.extensions.SerializationConfigurationExtension;
import io.domainlifecycles.plugins.mirror.MirrorSerializer;
import io.domainlifecycles.plugins.mirror.MirrorSerializerImpl;
import io.domainlifecycles.plugins.util.FileIOUtils;
import io.domainlifecycles.utils.ClassLoaderUtils;
import java.nio.file.Path;
import org.gradle.api.DefaultTask;
import org.gradle.api.NamedDomainObjectContainer;
import org.gradle.api.file.DirectoryProperty;
import org.gradle.api.tasks.Input;
import org.gradle.api.tasks.Optional;
import org.gradle.api.tasks.OutputDirectory;
import org.gradle.api.tasks.TaskAction;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * An abstract Gradle task for rendering domain models as JSON files.
 *
 * This task processes serialization configurations and generates corresponding
 * JSON outputs for the specified bounded context packages. It utilizes a JSON
 * serializer implementation to convert the domain models into serialized JSON strings.
 *
 * The task includes functionality to dynamically add classpath files to the project
 * during execution and manages the generation of JSON files in the specified output directory.
 *
 * @author Leon Völlinger
 */
public abstract class MirrorSerializerTask extends DefaultTask {

    private final static Logger log = LoggerFactory.getLogger(MirrorSerializerTask.class);

    /**
     * Retrieves the output directory for generated files.
     *
     * This method provides access to a {@code DirectoryProperty} that specifies
     * the directory where output files will be generated by the task.
     * When nothing is specified here, the default directory will be: {@code src/main/resources/META-INF/dlc}
     *
     * @return a {@code DirectoryProperty} representing the output directory for generated files.
     */
    @OutputDirectory
    @Optional
    public abstract DirectoryProperty getFileOutputDir();

    /**
     * Retrieves the serializations configuration container for the task.
     *
     * This method provides access to a container of {@code SerializationConfigurationExtension} objects,
     * which represent configuration settings for defining how domain models are serialized during task execution.
     * The container can be used to add, access, or modify serialization configurations dynamically.
     *
     * @return a {@code NamedDomainObjectContainer} of {@code SerializationConfigurationExtension}
     * providing configuration settings for serialization tasks.
     */
    @Input
    public abstract NamedDomainObjectContainer<SerializationConfigurationExtension> getSerializations();

    private MirrorSerializer mirrorSerializer;

    /**
     * Executes the task action for rendering domain models as JSON files.
     *
     * This method performs the following operations during execution:
     * - Initializes a JSON serializer with the configuration for pretty print.
     * - Dynamically adds the parent classpath files of the project to the current classpath.
     * - Iterates over the defined serialization configurations and processes each one
     *   by rendering the associated domain model as a JSON file and saving it to the output directory.
     *
     * The method relies on helper utilities and serializer implementations to perform
     * the necessary transformations and file operations.
     */
    @TaskAction
    public void action() {
        mirrorSerializer = new MirrorSerializerImpl(true);
        getSerializations().forEach(this::renderAndSaveModelAsJson);
    }

    private void renderAndSaveModelAsJson(final SerializationConfigurationExtension serializationConfigurationExtension) {
        String jsonContent = mirrorSerializer.serialize(ClassLoaderUtils.getParentClasspathFiles(getProject()), serializationConfigurationExtension.getDomainModelPackages().getOrNull());
        Path filePath = Path.of(getFileOutputDir().get().getAsFile().getAbsolutePath(), serializationConfigurationExtension.getFileName().get());

        log.info("Saving JSON model to {}", filePath);
        FileIOUtils.writeFileTo(filePath, jsonContent);
    }
}
