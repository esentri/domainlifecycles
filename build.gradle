plugins {
    // TODO @Galler
    id 'org.jreleaser' version '1.13.1'
    id 'net.researchgate.release' version '3.0.2'
}

def versionProps = new Properties()
file("version.properties").withInputStream { versionProps.load(it) }

task printVersion {
    doFirst {
        println('Domain Lifecycles Version: ' + versionProps.getProperty("version"))
    }
}

release {
    failOnCommitNeeded = true
    failOnPublishNeeded = true
    failOnSnapshotDependencies = false
    failOnUnversionedFiles = true
    failOnUpdateNeeded = true
    revertOnFail = true
    preCommitText = ''
    preTagCommitMessage = '[Gradle Release Plugin] - pre tag commit: '
    tagCommitMessage = '[Gradle Release Plugin] - creating tag: '
    newVersionCommitMessage = '[Gradle Release Plugin] - new version commit: '
    tagTemplate = '${version}'
    versionPropertyFile = 'version.properties'
    versionProperties = ['version']
    snapshotSuffix = '-SNAPSHOT'
    scmAdapters = [
            net.researchgate.release.GitAdapter
    ]

    git {
        requireBranch.set('main')
        pushToRemote.set('origin')
        commitVersionFileOnly.set(true)
        signTag.set(false)
    }
}

ext {
    dlcGroup = 'io.domainlifecycles'
    dlcVersion = versionProps.getProperty("version")
}

allprojects {

    plugins.withType(JavaPlugin) {
        repositories {
            mavenCentral()
        }
        dependencies {
            // TODO @Galler
            testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
            testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
        }
        test {
            useJUnitPlatform()
            testLogging {
                for (def level : LogLevel.values()) {
                    def testLogging = get(level)
                    testLogging.exceptionFormat = 'full'
                    testLogging.events = ["FAILED", "STANDARD_OUT", "STANDARD_ERROR"]
                }
            }
            maxParallelForks(1)
        }
        java {
            toolchain {
                languageVersion = JavaLanguageVersion.of(21)
            }
        }
        tasks.withType(Jar) {
            includeEmptyDirs = false
            enabled = true
        }
        tasks.withType(JavaCompile) {
            options.encoding = "UTF-8"
        }
        javadoc {
            title = '<h1>DomainLifecycles</h1>'
            options.bottom = '<i>provided by esentri.</i>'
            options.encoding = 'UTF-8'
            options.docEncoding = 'UTF-8'
            options.charSet = 'UTF-8'
            //options.links("https://docs.oracle.com/en/java/javase/${buildJavaVersion}/docs/api/")
            options.addBooleanOption 'html5', true
            options.tags(
                    'apiNote:a:API Note:',
                    'implSpec:a:Implementation Requirements:',
                    'implNote:a:Implementation Note:'
            )

        }
    }

    plugins.withId('checkstyle') {
        checkstyle {
            toolVersion = '10.12.4'
            configFile = rootProject.file('./checkstyle/checkstyle.xml')
            ignoreFailures = true
            showViolations = true

            checkstyleMain.source = "src/main/java"
        }
    }

    plugins.withId('dev.yumi.gradle.licenser') {
        checkLicenseMain.enabled = true
        checkLicenseTest.enabled = false
        license {
            // Add a license header rule, at least one must be present.
            rule(file("./copyright/HEADER"))
            // Apply license header ONLY to Java files
            exclude("**/tests/**/*.java")
            exclude("**/test/**/*.java")
            exclude("**/sampleshop/**/*.java")
        }
    }

    plugins.withId('maven-publish') {

        afterEvaluate {
            publishing {
                publications {
                    mavenJava(MavenPublication) {
                        groupId = dlcGroup
                        version = dlcVersion

                        from components.java

                        pom {
                            name = 'Domain Lifecycles'
                            description = 'A Java framework for developing applications using Domain-Driven Design.'
                            url = 'https://www.esentri.com'

                            licenses {
                                license {
                                    name = 'The Apache License, Version 2.0'
                                    url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                                }
                            }
                            developers {
                                developer {
                                    id = 'mherb'
                                    name = 'Mario Herb'
                                    email = 'mario.herb@esentri.com'
                                    organization = 'esentri AG'
                                    organizationUrl = 'https://www.esentri.com'
                                }
                                developer {
                                    id = 'dgaller'
                                    name = 'Dominik Galler'
                                    email = 'dominik.galler@esentri.com'
                                    organization = 'esentri AG'
                                    organizationUrl = 'https://www.esentri.com'
                                }
                            }
                            scm {
                                connection = 'scm:git@github.com:esentri/domainlifecycles.git'
                                url = 'https://github.com/esentri/domainlifecycles/'
                            }
                        }
                    }
                }

                repositories {
                    maven {
                        url = '../build/staging-deploy'
                    }
                }
            }
        }
    }
}

// ----------------------------------------------------------
//  RELEASE TO MAVEN CENTRAL
// ----------------------------------------------------------

jreleaser {
    project {
        java.groupId = 'io'
        version = versionProps.getProperty("version")
        description = 'A Java framework for developing applications using Domain-Driven Design.'
        copyright = 'The Apache License, Version 2.0'
    }
    signing {
        active = 'ALWAYS'
        armored = true
    }
    deploy {
        maven {
            mavenCentral {
                sonatype {
                    active = 'ALWAYS'
                    url = 'https://central.sonatype.com/api/v1/publisher'
                    stagingRepository('build/staging-deploy')
                }
            }
        }
    }
}

// ----------------------------------------------------------
//  GRADLE.WRAPPER
// ----------------------------------------------------------

wrapper {
    gradleVersion = '8.10.1'
    distributionType = 'ALL'
}

