#.AF:visual=frame align=left
#.AF_R:visual=frame align=left;stroke=#FF0000
#.AF_N:visual=frame align=left;stroke=#108738
#.AR:fill=#8f8f bold
#.AR_R:fill=#8f8f bold;stroke=#FF0000
#.AR_N:fill=#8f8f bold;stroke=#108738
#.E:fill=#88AAFF bold
#.E_R:fill=#88AAFF bold;stroke=#FF0000
#.E_N:fill=#88AAFF bold;stroke=#108738
#.VO:fill=#FFFFCC bold
#.VO_R:fill=#FFFFCC bold;stroke=#FF0000
#.VO_N:fill=#FFFFCC bold;stroke=#108738
#.V:fill=#FFFFCC bold
#.V_R:fill=#FFFFCC bold;stroke=#FF0000
#.V_N:fill=#FFFFCC bold;stroke=#108738
#.I:fill=#FFFFCC bold
#.I_R:fill=#FFFFCC bold;stroke=#FF0000
#.I_N:fill=#FFFFCC bold;stroke=#108738
#.DC:fill=#FFB266 bold
#.DC_R:fill=#FFB266 bold;stroke=#FF0000
#.DC_N:fill=#FFB266 bold;stroke=#108738
#.DE:fill=#CCFFFF bold
#.DE_R:fill=#CCFFFF bold;stroke=#FF0000
#.DE_N:fill=#CCFFFF bold;stroke=#108738
#.AS:bold
#.AS_R:bold;stroke=#FF0000
#.AS_N:bold;stroke=#108738
#.DS:fill=#E0E0E0 bold
#.R:fill=#C0C0C0 bold
#.R_R:fill=#C0C0C0 bold;stroke=#FF0000
#.R_N:fill=#C0C0C0 bold;stroke=#108738
#.OS:fill=#C0C0C0 bold
#.OS_R:fill=#C0C0C0 bold;stroke=#FF0000
#.OS_N:fill=#C0C0C0 bold;stroke=#108738
#.SK:fill=#C0C0C0 bold
#.SK_R:fill=#C0C0C0 bold;stroke=#FF0000
#.SK_N:fill=#C0C0C0 bold;stroke=#108738
#.QH:fill=#C0C0C0 bold
#.QH_R:fill=#C0C0C0 bold;stroke=#FF0000
#.QH_N:fill=#C0C0C0 bold;stroke=#108738
#.RM:fill=#FFCCE5 bold
#.RM_R:fill=#FFCCE5 bold;stroke=#FF0000
#.RM_N:fill=#FFCCE5 bold;stroke=#108738
#font:Helvetica
#direction:down
#acycler: greedy
#ranker: longest-path
#background: transparent
#.note: fill=#ffffff italic

// !!! sampleshop.core.domain.customer.AddNewCustomer !!!
[<DC> AddNewCustomer <<DomainCommand>> ]
// !!! sampleshop.core.domain.customer.ChangeCreditCard !!!
[<DC> ChangeCreditCard <<DomainCommand>> ]
// !!! sampleshop.core.domain.customer.ChangeCustomerAddress !!!
[<DC> ChangeCustomerAddress <<DomainCommand>> ]
// !!! sampleshop.core.domain.order.CancelOrder !!!
[<DC> CancelOrder <<DomainCommand>> ]
// !!! sampleshop.core.domain.order.PlaceOrder !!!
[<DC> PlaceOrder <<DomainCommand>> ]
// !!! sampleshop.core.domain.order.ShipOrder !!!
[<DC> ShipOrder <<DomainCommand>> ]
// !!! sampleshop.inbound.driver.CustomerService !!!
[<AS> CustomerDriver <<Driver>> |
+ Customer add(AddNewCustomer)
+ Optional<Customer> changeAddress(ChangeCustomerAddress)
+ Optional<Customer> changeCreditCard(ChangeCreditCard)
+ List<Customer> find(int,int)
+ List<OrdersByCustomer> reportOrders(String,int,int)
]
// !!! sampleshop.inbound.driver.OrderService !!!
[<AS> OrderDriver <<Driver>> |
+ Optional<Order> cancel(CancelOrder)
+ List<Order> find(int,int,OrderStatus\[\])
+ Order place(PlaceOrder)
+ Optional<Order> ship(ShipOrder)
]
// !!! sampleshop.inbound.driver.ProductService !!!
[<AS> ProductDriver <<Driver>> |
+ Product create(Product)
+ Optional<Product> find(Product$ProductId)
+ void removeAll()
]
// !!! sampleshop.core.domain.customer.CustomerNotificationService !!!
[<DS> CustomerNotificationService <<DomainService>> |
+ void notifyNewOrderPlaced(NewOrderPlaced)
+ void notifyOrderCanceled(OrderCanceled)
+ void notifyOrderShipped(OrderShipped)
]
// !!! sampleshop.core.domain.order.OrderPlacementService !!!
[<DS> OrderPlacementService <<DomainService>> |
+ Order placeOrder(PlaceOrder)
]
// !!! sampleshop.core.domain.customer.CustomerAdressChanged !!!
[<DE> CustomerAdressChanged <<DomainEvent>> ]
// !!! sampleshop.core.domain.customer.CustomerCreditCardChanged !!!
[<DE> CustomerCreditCardChanged <<DomainEvent>> ]
// !!! sampleshop.core.domain.customer.FraudDetected !!!
[<DE> FraudDetected <<DomainEvent>> ]
// !!! sampleshop.core.domain.customer.NewCustomerAdded !!!
[<DE> NewCustomerAdded <<DomainEvent>> ]
// !!! sampleshop.core.domain.order.NewOrderPlaced !!!
[<DE> NewOrderPlaced <<DomainEvent>> ]
// !!! sampleshop.core.domain.order.OrderCanceled !!!
[<DE> OrderCanceled <<DomainEvent>> ]
// !!! sampleshop.core.domain.order.OrderShipped !!!
[<DE> OrderShipped <<DomainEvent>> ]
// !!! {Frame} sampleshop.core.domain.customer.Customer !!!
[<AF> Customer <<Aggregate>>|
// !!! sampleshop.core.domain.customer.Customer !!!
[<AR> Customer <<AggregateRoot>> |
\# +- id:<ID> Customer$CustomerId
o +- blocked:boolean
\# +- userName:String\[0,100\]{notEmpty}
|
+ Customer block()
+ void onFraudDetected(FraudDetected)
+ Customer setUsername(String)
]
// !!! sampleshop.core.domain.customer.Address !!!
[<VO> Address <<ValueObject>> |
\# +- city:String\[0,50\]{notEmpty}
\# +- country:String\[0,50\]{notEmpty}
\# +- state:String\[0,50\]{notEmpty}
\# +- street:String\[0,50\]{notEmpty}
\# +- zipcode:String\[0,10\]{notEmpty}
|
]
// !!! sampleshop.core.domain.customer.CreditCard !!!
[<VO> CreditCard <<ValueObject>> |
\# +- cardNumber:String\[0,19\]{notEmpty}
\# +- ccvNumber:String\[0,4\]{notEmpty}
\# +- expiration:LocalDate
\# +- ownerName:String\[0,100\]{notEmpty}
\# +- type:<ENUM> CreditCardType
|
]
[<AR>Customer <<AggregateRoot>>]  o-[<label> address 1] - [<VO>Address <<ValueObject>>]
[<AR>Customer <<AggregateRoot>>]  o-[<label> creditCard 0..1] - [<VO>CreditCard <<ValueObject>>]
]
// !!! {Frame} sampleshop.core.domain.order.Order !!!
[<AF> Order <<Aggregate>>|
// !!! sampleshop.core.domain.order.Order !!!
[<AR> Order <<AggregateRoot>> |
\# +- id:<ID> Order$OrderId
o +- creation:Instant
\# +- customerId:<IDREF> Customer$CustomerId
\# +- status:<ENUM> OrderStatus
|
+ Order add(Product$ProductId)
+ Order addItem(\# Product$ProductId,int{>0})
+ Order cancel()
+ boolean hasStatus(OrderStatus)
+ Order ship()
+ Price totalPrice()
]
// !!! sampleshop.core.domain.order.OrderItem !!!
[<E> OrderItem <<Entity>> |
\# +- id:<ID> OrderItem$OrderItemId
\# +- productId:<IDREF> Product$ProductId
\# +- productPrice:<VO> Price
o +- quantity:int{>0}
|
+ OrderItem addQuantity(int)
+ Price itemPrice()
]
[<AR>Order <<AggregateRoot>>]  +-[<label> items 0..*] - [<E>OrderItem <<Entity>>]
]
// !!! {Frame} sampleshop.core.domain.product.Product !!!
[<AF> Product <<Aggregate>>|
// !!! sampleshop.core.domain.product.Product !!!
[<AR> Product <<AggregateRoot>> |
\# +- id:<ID> Product$ProductId
o +- description:Optional<String\[0,1000\]>
o +- image:Optional<URI>
\# +- name:String\[0,200\]{notEmpty}
\# +- price:<VO> Price
|
]
]
[<AF> Order <<Aggregate>>]  -[<label> Order.customerId] -> [<AF> Customer <<Aggregate>>]
[<AF> Order <<Aggregate>>]  -[<label> OrderItem.productId] -> [<AF> Product <<Aggregate>>]
// !!! sampleshop.outbound.JooqCustomerRepository !!!
[<R> CustomerRepository <<Repository>> |
+ Optional<A> deleteById(Identity)
+ Stream<Customer> find(int,int)
+ Optional<A> findById(Identity)
+ AggregateRoot insert(AggregateRoot)
+ Customer$CustomerId newCustomerId()
+ AggregateRoot update(AggregateRoot)
]
// !!! sampleshop.outbound.JooqOrderRepository !!!
[<R> OrderRepository <<Repository>> |
+ Optional<A> deleteById(Identity)
+ Stream<Order> find(int,int,OrderStatus\[\])
+ Optional<A> findById(Identity)
+ AggregateRoot insert(AggregateRoot)
+ Order$OrderId newOrderId()
+ OrderItem$OrderItemId newOrderItemId()
+ AggregateRoot update(AggregateRoot)
]
// !!! sampleshop.outbound.JooqProductRepository !!!
[<R> ProductRepository <<Repository>> |
+ Optional<A> deleteById(Identity)
+ Optional<A> findById(Identity)
+ AggregateRoot insert(AggregateRoot)
+ Product$ProductId newProductId()
+ void removeAll()
+ AggregateRoot update(AggregateRoot)
]
// !!! sampleshop.core.outport.OrdersByCustomer !!!
[<RM> OrdersByCustomer <<ReadModel>> |
o +- canceledOrders:int
o +- customerName:String
o +- pendingOrders:int
o +- shippedOrders:int
]
// !!! sampleshop.outbound.JooqOrdersByCustomerQueryHandler !!!
[<QH> OrdersByCustomerQueryHandler <<QueryHandler>> ]
// !!! sampleshop.outbound.EmailNotifierImpl !!!
[<OS> EmailNotifierService <<OutboundService>> ]
[<DC>AddNewCustomer <<DomainCommand>>]  --> [<AS>CustomerDriver <<Driver>>]
[<DC>ChangeCreditCard <<DomainCommand>>]  --> [<AS>CustomerDriver <<Driver>>]
[<DC>ChangeCustomerAddress <<DomainCommand>>]  --> [<AS>CustomerDriver <<Driver>>]
[<DC>CancelOrder <<DomainCommand>>]  --> [<AS>OrderDriver <<Driver>>]
[<DC>PlaceOrder <<DomainCommand>>]  --> [<AS>OrderDriver <<Driver>>]
[<DC>ShipOrder <<DomainCommand>>]  --> [<AS>OrderDriver <<Driver>>]
[<AF> Customer <<Aggregate>>]  --> [<DE>CustomerAdressChanged <<DomainEvent>>]
[<AF> Customer <<Aggregate>>]  --> [<DE>CustomerCreditCardChanged <<DomainEvent>>]
[<DE>FraudDetected <<DomainEvent>>]  --> [Customer <<Aggregate>>]
[<AS>CustomerDriver <<Driver>>]  --> [<DE>NewCustomerAdded <<DomainEvent>>]
[<DE>NewOrderPlaced <<DomainEvent>>]  --> [<DS>CustomerNotificationService <<DomainService>>]
[<DS>OrderPlacementService <<DomainService>>]  --> [<DE>NewOrderPlaced <<DomainEvent>>]
[<DE>OrderCanceled <<DomainEvent>>]  --> [<DS>CustomerNotificationService <<DomainService>>]
[<AF> Order <<Aggregate>>]  --> [<DE>OrderCanceled <<DomainEvent>>]
[<DE>OrderShipped <<DomainEvent>>]  --> [<DS>CustomerNotificationService <<DomainService>>]
[<AF> Order <<Aggregate>>]  --> [<DE>OrderShipped <<DomainEvent>>]
[<DS>CustomerNotificationService <<DomainService>>]  -- [<OS>EmailNotifierService <<OutboundService>>]
[<DS>CustomerNotificationService <<DomainService>>]  -- [<R>CustomerRepository <<Repository>>]
[<DS>OrderPlacementService <<DomainService>>]  -- [<R>OrderRepository <<Repository>>]
[<DS>OrderPlacementService <<DomainService>>]  -- [<R>ProductRepository <<Repository>>]
[<AS>CustomerDriver <<Driver>>]  -- [<R>CustomerRepository <<Repository>>]
[<AS>CustomerDriver <<Driver>>]  -- [<QH>OrdersByCustomerQueryHandler <<QueryHandler>>]
[<AS>OrderDriver <<Driver>>]  -- [<DS>OrderPlacementService <<DomainService>>]
[<AS>OrderDriver <<Driver>>]  -- [<R>OrderRepository <<Repository>>]
[<AS>ProductDriver <<Driver>>]  -- [<R>ProductRepository <<Repository>>]
[<R>CustomerRepository <<Repository>>]  -- [<AF> Customer <<Aggregate>>]
[<R>OrderRepository <<Repository>>]  -- [<AF> Order <<Aggregate>>]
[<R>ProductRepository <<Repository>>]  -- [<AF> Product <<Aggregate>>]
[<QH>OrdersByCustomerQueryHandler <<QueryHandler>>]  -- [<RM>OrdersByCustomer <<ReadModel>>]
